{"ast":null,"code":"class AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`http://localhost:8080//basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/konrad/STUDIA_SEM_6/Web-application-development/PROJECT/isel-daw-private/front-endv1/src/service/AuthenticationService.js"],"names":["AuthenticationService","executeBasicAuthenticationService","username","password","axios","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","USER_NAME_SESSION_ATTRIBUTE_NAME","setupAxiosInterceptors","token","interceptors","request","use","config","isUserLoggedIn"],"mappings":"AAAA,MAAMA,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOC,KAAK,CAACC,GAAN,CAAW,kCAAX,EACH;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BN,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDK,EAAAA,oBAAoB,CAACN,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDQ,EAAAA,uBAAuB,CAACT,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACA;AACAS,IAAAA,cAAc,CAACC,OAAf,CAAuBC,gCAAvB,EAAyDZ,QAAzD;AACA,SAAKa,sBAAL,CAA4B,KAAKP,oBAAL,CAA0BN,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDY,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC1BZ,IAAAA,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKC,cAAL,EAAJ,EAA2B;AACvBD,QAAAA,MAAM,CAACd,OAAP,CAAeC,aAAf,GAA+BS,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AA3BuB;;AA8B5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["class AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`http://localhost:8080//basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}